// Generated by LiveScript 1.2.0
var Q, request, deepmerge, chainForwards, services;
Q = require('q');
request = require('request');
deepmerge = require('deepmerge');
chainForwards = ['jar', 'oauth', 'httpSignature', 'aws', 'auth', 'getHeader', 'json', 'multipart', 'form', 'qs', 'setHeader', 'setHeaders'];
module.exports = services = function(servicesConfig){
  var service;
  servicesConfig == null && (servicesConfig = {});
  return service = function(svcName, req, i18n){
    var fetch;
    fetch = function(uri, options){
      var deferred, conf, ref$, stream, promise;
      options == null && (options = {});
      options.only20x == null && (options.only20x = true);
      deferred = Q.defer();
      conf = servicesConfig[svcName];
      if (conf != null) {
        if (conf.mapArgs != null) {
          ref$ = conf.mapArgs(uri, options, req, i18n), uri = ref$.uri, options = ref$.options;
        }
        if (conf.defaults != null) {
          options = deepmerge(conf.defaults, options);
        }
        stream = request(uri, options, function(error, response, body){
          var err;
          if (error != null) {
            return deferred.reject(error);
          } else {
            if (response.statusCode < 400 || !options.only20x) {
              return deferred.fulfill({
                response: response,
                body: body
              });
            } else {
              err = new Error("Non-20x status code from service (" + response.statusCode + ")");
              err.response = response;
              err.body = body;
              return deferred.reject(err);
            }
          }
        });
      } else {
        deferred.reject(new Error("Unknown service: " + svcName));
      }
      promise = chainForwards.reduce(function(p, fwd){
        p[fwd] = function(){
          if (stream != null) {
            stream[fwd].apply(this, arguments);
          }
          return p;
        };
        return p;
      }, deferred.promise);
      return Object.defineProperties(promise, {
        stream: {
          value: stream
        },
        asJson: {
          get: function(){
            return this.get('body').then(function(body){
              if ('string' === typeof body) {
                return JSON.parse(body);
              } else {
                return body;
              }
            });
          }
        },
        hasHeader: {
          value: function(){
            return stream != null ? stream.setHeaders.apply(this, arguments) : void 8;
          }
        },
        getHeader: {
          value: function(){
            return stream != null ? stream.getHeader.apply(this, arguments) : void 8;
          }
        }
      });
    };
    return fetch.get = fetch, fetch.patch = function(uri, options){
      options == null && (options = {});
      options.method = 'PATCH';
      return fetch(uri, options);
    }, fetch.post = function(uri, options){
      options == null && (options = {});
      options.method = 'POST';
      return fetch(uri, options);
    }, fetch.put = function(uri, options){
      options == null && (options = {});
      options.method = 'PUT';
      return fetch(uri, options);
    }, fetch.del = function(uri, options){
      options == null && (options = {});
      options.method = 'DELETE';
      return fetch(uri, options);
    }, fetch.head = function(uri, options){
      options == null && (options = {});
      options.method = 'HEAD';
      return fetch(uri, options);
    }, fetch.jar = request.jar, fetch.cookie = request.cookie, fetch;
  };
};