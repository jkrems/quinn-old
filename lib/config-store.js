// Generated by LiveScript 1.2.0
var path, deepmerge, configStore, slice$ = [].slice;
path = require('path');
deepmerge = require('deepmerge');
module.exports = configStore = function(){
  var _state, _byEnv, config;
  _state = {
    env: process.env.NODE_ENV || 'development',
    appRoot: process.cwd()
  };
  _byEnv = {};
  config = {};
  return Object.defineProperties(config, {
    extend: {
      value: function(overrides){
        return _state = deepmerge(_state, overrides);
      }
    },
    defaults: {
      value: function(defValues){
        return _state = deepmerge(defValues, _state);
      }
    },
    configure: {
      value: function(env, settings){
        var ref$;
        if (_state.env === env) {
          return config.extend(settings);
        } else {
          return _byEnv[env] = deepmerge((ref$ = _byEnv[env]) != null
            ? ref$
            : {}, settings);
        }
      }
    },
    includeEnv: {
      value: function(env){
        var ref$;
        return config.extend((ref$ = _byEnv[env]) != null
          ? ref$
          : {});
      }
    },
    current: {
      get: function(){
        return _state;
      },
      enumerable: true
    },
    get: {
      value: function(configKey){
        var traverse;
        if (!configKey) {
          return config.current;
        }
        traverse = function(obj, part){
          var ref$;
          return (ref$ = obj != null ? obj[part] : void 8) != null ? ref$ : null;
        };
        return configKey.split('.').reduce(traverse, config.current);
      }
    },
    appPath: {
      value: function(){
        var segments;
        segments = slice$.call(arguments);
        return path.join.apply(path, [config.current.appRoot].concat(slice$.call(segments)));
      }
    },
    loadAppConfig: {
      value: function(appRoot){
        var initialFile;
        _state.appRoot = appRoot;
        initialFile = path.join(appRoot, 'config');
        return config.loadConfigFile(initialFile);
      }
    },
    loadConfigFile: {
      value: function(filename, isOptional){
        var overrides, e;
        isOptional == null && (isOptional = false);
        overrides = isOptional
          ? (function(){
            try {
              return require(filename);
            } catch (e$) {
              e = e$;
              if (e.code === 'MODULE_NOT_FOUND') {
                return {};
              } else {
                throw e;
              }
            }
          }())
          : require(filename);
        if ('function' === typeof overrides) {
          return overrides(config);
        } else {
          return config.extend(overrides);
        }
      }
    }
  });
};