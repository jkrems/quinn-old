// Generated by LiveScript 1.2.0
var Readable, jsonStringifySafe, Q, MIME, allStringify, respond;
Readable = require('stream').Readable;
jsonStringifySafe = require('json-stringify-safe');
Q = require('q');
MIME = {
  JSON: 'application/json; charset=utf-8',
  TEXT: 'text/plain'
};
allStringify = curry$(function(marshal, raw){
  switch (false) {
  case !Buffer.isBuffer(raw):
    return marshal(raw.toString());
  case !Q.isPromise(raw):
    return raw.then(allStringify(marshal));
  default:
    return marshal(raw);
  }
});
module.exports = respond = curry$(function(result, res){
  return Q.when(result, function(arg$){
    var body, status, headers;
    body = arg$.body, status = arg$.status, headers = arg$.headers;
    return Q.when(body, function(body){
      if ('string' === typeof body || Buffer.isBuffer(body)) {
        headers['Content-Length'] == null && (headers['Content-Length'] = Buffer.byteLength(body));
      }
      res.writeHead(status, headers);
      if (body instanceof Readable) {
        return body.pipe(res);
      } else {
        return res.end(body);
      }
    });
  });
});
respond.text = function(body, status, _headers){
  var headers;
  body == null && (body = '');
  status == null && (status = 200);
  _headers == null && (_headers = {});
  headers = import$({
    'Content-Type': MIME.TEXT
  }, _headers);
  return respond({
    body: body,
    status: status,
    headers: headers
  });
};
respond.json = function(obj, status, _headers){
  var body, headers;
  obj == null && (obj = null);
  status == null && (status = 200);
  _headers == null && (_headers = {});
  body = allStringify(JSON.stringify, obj);
  headers = import$({
    'Content-Type': MIME.JSON
  }, _headers);
  return respond({
    body: body,
    status: status,
    headers: headers
  });
};
respond.jsonSafe = function(obj, status, _headers){
  var body, headers;
  obj == null && (obj = null);
  status == null && (status = 200);
  _headers == null && (_headers = {});
  body = allStringify(jsonStringifySafe(obj));
  headers = import$({
    'Content-Type': MIME.JSON
  }, _headers);
  return respond({
    body: body,
    status: status,
    headers: headers
  });
};
respond.redirect = function(url, status, _headers){
  var headers;
  status == null && (status = 302);
  _headers == null && (_headers = {});
  headers = import$({
    'Location': url
  }, _headers);
  return respond({
    body: null,
    status: status,
    headers: headers
  });
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}