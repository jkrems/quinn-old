// Generated by LiveScript 1.2.0
var jsonStringifySafe, respond;
jsonStringifySafe = require('json-stringify-safe');
module.exports = respond = curry$(function(result, res){
  var body, status, headers;
  body = result.body, status = result.status, headers = result.headers;
  res.writeHead(status, headers);
  return res.end(body);
});
respond.text = function(body, status, _headers){
  var headers;
  status == null && (status = 200);
  _headers == null && (_headers = {});
  headers = import$({
    'Content-Type': 'text/plain',
    'Content-Length': Buffer.byteLength(body)
  }, _headers);
  return respond({
    body: body,
    status: status,
    headers: headers
  });
};
respond.json = function(obj, status, _headers){
  var body, headers;
  status == null && (status = 200);
  _headers == null && (_headers = {});
  body = JSON.stringify(obj);
  headers = import$({
    'Content-Type': 'application/json',
    'Content-Length': Buffer.byteLength(body)
  }, _headers);
  return respond({
    body: body,
    status: status,
    headers: headers
  });
};
respond.jsonSafe = function(obj, status, _headers){
  var body, headers;
  status == null && (status = 200);
  _headers == null && (_headers = {});
  body = jsonStringifySafe(obj);
  headers = import$({
    'Content-Type': 'application/json',
    'Content-Length': Buffer.byteLength(body)
  }, _headers);
  return respond({
    body: body,
    status: status,
    headers: headers
  });
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}