// Generated by LiveScript 1.2.0
var path, Q, knownControllers, controllerAction, registerController, discoverControllers;
path = require('path');
Q = require('q');
knownControllers = {};
module.exports = controllerAction = function(description, options){
  var ref$, module, action, controller;
  options == null && (options = {});
  ref$ = description.split('#'), module = ref$[0], action = ref$[1];
  action == null && (action = 'index');
  controller = knownControllers[module];
  if (controller == null) {
    throw new Error("No known controller for module " + module);
  }
  if (controller[action] == null) {
    throw new Error("Controller of module " + module + " has no action " + action);
  }
  return function(req){
    req.module = module;
    req.action = action;
    return controller[action].apply(this, arguments);
  };
};
registerController = function(name, controller){
  return knownControllers[name] = controller;
};
discoverControllers = function(modules){
  var foundControllers;
  return foundControllers = modules.filter(function(module){
    var controllerFile, err;
    controllerFile = path.join(module.directory, 'controller');
    return module.controller = (function(){
      try {
        return require(controllerFile);
      } catch (e$) {
        err = e$;
        if (err.code === 'MODULE_NOT_FOUND') {
          return null;
        } else {
          throw err;
        }
      }
    }());
  }).map(function(arg$){
    var name, controller;
    name = arg$.name, controller = arg$.controller;
    knownControllers[name] = controller;
    return name;
  });
};
controllerAction.registerController = registerController;
controllerAction.discoverControllers = discoverControllers;