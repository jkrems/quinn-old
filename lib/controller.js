// Generated by LiveScript 1.2.0
var path, Q, knownControllers, container, inject, controllerAction, registerController, discoverControllers, slice$ = [].slice;
path = require('path');
Q = require('q');
knownControllers = {};
container = {
  respond: require('./respond')
};
inject = function(box){
  var i$, deps, fn, args;
  deps = 0 < (i$ = box.length - 1) ? slice$.call(box, 0, i$) : (i$ = 0, []), fn = box[i$];
  args = deps.map(function(dep){
    return container[dep];
  });
  return fn.apply(null, args);
};
module.exports = controllerAction = function(description, options){
  var ref$, ctrl, action;
  options == null && (options = {});
  ref$ = description.split('#'), ctrl = ref$[0], action = ref$[1];
  action == null && (action = 'main');
  if (knownControllers[ctrl] == null) {
    throw new Error("Unknown controller: " + ctrl);
  }
  return function(){
    var controller;
    controller = inject(knownControllers[ctrl]);
    return controller[action].apply(this, arguments);
  };
};
registerController = function(name, controller){
  return knownControllers[name] = controller;
};
discoverControllers = function(modules){
  var foundControllers;
  return foundControllers = modules.filter(function(module){
    var controllerFile, err;
    controllerFile = path.join(module.directory, 'controller');
    return module.controller = (function(){
      try {
        return require(controllerFile);
      } catch (e$) {
        err = e$;
        if (err.code === 'MODULE_NOT_FOUND') {
          return null;
        } else {
          throw err;
        }
      }
    }());
  }).map(function(arg$){
    var name, controller;
    name = arg$.name, controller = arg$.controller;
    knownControllers[name] = controller;
    return name;
  });
};
controllerAction.registerController = registerController;
controllerAction.discoverControllers = discoverControllers;