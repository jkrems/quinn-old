// Generated by LiveScript 1.2.0
var querystring, STATUS_CODES, EventEmitter, Q, router, respond, HTTP_VERBS, defaultRoute, defaultErrorHandler, mapResult, sendTo, createApp, toString$ = {}.toString;
querystring = require('querystring');
STATUS_CODES = require('http').STATUS_CODES;
EventEmitter = require('events').EventEmitter;
Q = require('q');
router = require('./router');
respond = require('./respond');
HTTP_VERBS = {
  get: ['GET', 'HEAD'],
  post: ['POST'],
  put: ['PUT'],
  patch: ['PATCH'],
  del: ['DELETE'],
  head: ['HEAD'],
  options: ['OPTIONS']
};
defaultRoute = {
  params: [],
  handler: function(arg$){
    var method, pathname;
    method = arg$.method, pathname = arg$.pathname;
    return respond.text("Cannot " + method + " " + pathname, 404);
  }
};
defaultErrorHandler = function(req, err){
  return respond.text(err.stack, 500);
};
mapResult = function(result){
  switch (toString$.call(result).slice(8, -1)) {
  case 'Function':
    return result;
  case 'String':
    return respond.text(result);
  case 'Number':
    return respond.text(STATUS_CODES[String(result)], result);
  case 'Array':
    return respond.chunks(result);
  default:
    return respond(result);
  }
};
sendTo = function(result, res){
  return result.then(mapResult).fcall(res);
};
module.exports = createApp = function(){
  var matchRoute, pushRoute, app, i$;
  matchRoute = router();
  pushRoute = matchRoute.pushRoute;
  app = new EventEmitter();
  app.errorHandler = defaultErrorHandler;
  app.handleRequest = function(req, res){
    var lastResortResponse, ref$, pathname, search, query, handler, params, result;
    lastResortResponse = function(err){
      res.writeHead(500, {
        'Content-Type': 'text/plain'
      });
      res.end(STATUS_CODES['500']);
      return app.emit('error', err);
    };
    ref$ = req.url.split('?'), pathname = ref$[0], search = ref$[1];
    query = querystring.parse(search);
    req.pathname = pathname;
    req.query = query;
    ref$ = (ref$ = matchRoute(req)) != null ? ref$ : defaultRoute, handler = ref$.handler, params = ref$.params;
    result = Q.fcall(handler, req, params);
    return sendTo(result, res)['catch'](function(err){
      var result;
      result = Q.fcall(app.errorHandler, req, err);
      return sendTo(result, res);
    })['catch'](lastResortResponse);
  };
  for (i$ in HTTP_VERBS) {
    (fn$.call(this, i$, HTTP_VERBS[i$]));
  }
  app.all = function(routeOrRegex, stackOrHandler){
    var handler;
    handler = stackOrHandler;
    return pushRoute(routeOrRegex, handler);
  };
  return app;
  function fn$(method, verbs){
    app[method] = function(routeOrRegex, stackOrHandler){
      var handler;
      handler = stackOrHandler;
      return pushRoute(routeOrRegex, handler, verbs);
    };
  }
};