// Generated by LiveScript 1.2.0
var path, Q, discoverControllers;
path = require('path');
Q = require('q');
discoverControllers = function(){
  var knownControllers, controllerAction, registerController;
  knownControllers = {};
  modules.forEach(function(module){
    var controllerFile, err;
    controllerFile = path.join(module.directory, 'controller');
    return module.controller = (function(){
      try {
        return knownControllers[module.name] = require(controllerFile);
      } catch (e$) {
        err = e$;
        if (err.code === 'MODULE_NOT_FOUND') {
          return null;
        } else {
          throw err;
        }
      }
    }());
  });
  controllerAction = function(description, options){
    var ref$, module, action, controller;
    options == null && (options = {});
    ref$ = description.split('.'), module = ref$[0], action = ref$[1];
    action == null && (action = 'index');
    controller = knownControllers[module];
    if (controller == null) {
      throw new Error("No known controller for module " + module);
    }
    if (controller[action] == null) {
      throw new Error("Controller of module " + module + " has no action " + action);
    }
    return function(req){
      req.module = module;
      req.action = action;
      return controller[action].apply(this, arguments);
    };
  };
  registerController = function(name, controller){
    return knownControllers[name] = controller;
  };
  return controllerAction.registerController = registerController, controllerAction;
};