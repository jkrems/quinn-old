// Generated by LiveScript 1.2.0
var Q, pageModel, target, COMMENTS_PATTERN, ARGS_PATTERN, ARG_PATTERN, targetFromFn, parseTarget, requestContext, action, inject, toString$ = {}.toString, slice$ = [].slice;
Q = require('q');
pageModel = require('./page-model');
target = function(dependencies, targetFn){
  var targetWithContext;
  return targetWithContext = function(ctx){
    var args;
    args = dependencies.map(function(dep){
      var that, err;
      if ((that = ctx[dep]) != null) {
        return that;
      } else {
        err = new Error("Unresolved dependency " + JSON.stringify(String(dep)));
        ({
          meta: {
            targetFn: err[targetFn.toString()],
            dependencies: err.dependencies,
            dependency: err.dep
          }
        });
        throw err;
      }
    });
    switch (args.length) {
    case 0:
      return targetFn();
    case 1:
      return targetFn(args[0]);
    case 2:
      return targetFn(args[0], args[1]);
    case 3:
      return targetFn(args[0], args[1], args[2]);
    case 4:
      return targetFn(args[0], args[1], args[2], args[3]);
    case 5:
      return targetFn(args[0], args[1], args[2], args[3], args[4]);
    case 6:
      return targetFn(args[0], args[1], args[2], args[3], args[4], args[5]);
    case 7:
      return targetFn(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
    case 8:
      return targetFn(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);
    case 9:
      return targetFn(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8]);
    case 10:
      return targetFn(args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]);
    default:
      return targetFn.apply(void 8, args);
    }
  };
};
COMMENTS_PATTERN = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
ARGS_PATTERN = /^function\s*[^\(]*\(\s*([^\)]*)\)/m;
ARG_PATTERN = /^\s*(_?)(\S+?)\1\s*$/;
targetFromFn = function(targetFn){
  var source, ref$, _, fnArgs, dependencies;
  source = targetFn.toString().replace(COMMENTS_PATTERN, '');
  ref$ = source.match(ARGS_PATTERN), _ = ref$[0], fnArgs = ref$[1];
  dependencies = fnArgs.split(',').map(function(arg){
    return arg.replace(ARG_PATTERN, '$2');
  });
  return target(dependencies, targetFn);
};
parseTarget = function(rawTarget){
  switch (toString$.call(rawTarget).slice(8, -1)) {
  case 'Function':
    return targetFromFn(rawTarget);
  case 'Array':
    return targetFromArray(rawTarget);
  default:
    throw new Error("Invalid inject target: " + String(rawTarget));
  }
};
requestContext = function(req, params, varargs){
  var ctx, defaultTemplate;
  ctx = {
    req: req,
    params: params,
    varargs: varargs
  };
  defaultTemplate = req.action === 'index'
    ? req.module
    : req.module + "/" + req.action;
  Object.defineProperties(ctx, {
    present: {
      value: function(presenter, data){
        return Q.when(data, presenter);
      }
    },
    service: {
      value: function(svcName){
        return req.quinnCtx.service(svcName, ctx.req, ctx.i18n);
      }
    },
    page: {
      get: function(){
        var ref$;
        return (ref$ = this._page) != null
          ? ref$
          : this._page = pageModel(req, req.quinnCtx.i18n);
      }
    },
    i18n: {
      get: function(){
        return req.quinnCtx.i18n;
      }
    },
    render: {
      get: function(){
        var ref$;
        return (ref$ = this._render) != null
          ? ref$
          : this._render = function(tplName, tplCtx, tplOpts){
            var ref$;
            tplName == null && (tplName = defaultTemplate);
            req.__isHtml = true;
            if ('string' !== typeof tplName) {
              ref$ = [tplCtx, tplName, defaultTemplate], tplOpts = ref$[0], tplCtx = ref$[1], tplName = ref$[2];
            }
            tplCtx == null && (tplCtx = ctx.page);
            return req.quinnCtx.render(tplName, tplCtx, tplOpts);
          };
      }
    }
  });
  return ctx;
};
action = function(rawTarget){
  var targetWithContext;
  targetWithContext = parseTarget(rawTarget);
  return function(req, params){
    var varargs;
    varargs = slice$.call(arguments, 2);
    return targetWithContext(requestContext(req, params, varargs));
  };
};
module.exports = inject = curry$(function(rawTarget, context){
  return parseTarget(rawTarget)(context);
});
inject.action = action;
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}