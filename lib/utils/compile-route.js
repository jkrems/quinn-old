// Generated by LiveScript 1.2.0
var omit, RESERVED_CHARACTER, ROUTE_SEGMENT, escapeRegex, compileRoute, slice$ = [].slice;
omit = require('lodash').omit;
RESERVED_CHARACTER = /([.?*+^$[\]\\(){}-])/g;
ROUTE_SEGMENT = /((\{[a-z_$][a-z0-9_$]*\})|[*.+()])/ig;
escapeRegex = function(symbol){
  return String(symbol).replace(RESERVED_CHARACTER, '\\$1');
};
/**
 * Compiles the given route string into a RegExp that can be used to match
 * it. The route may contain named keys in the form of a colon followed by a
 * valid JavaScript identifier (e.g. ":name", ":_name", or ":$name" are all
 * valid keys). If it does, these keys will be added to the given keys array.
 *
 * If the route contains the special "*" symbol, it will automatically create a
 * key named "splat" and will substituted with a "(.*?)" pattern in the
 * resulting RegExp.
 */
module.exports = compileRoute = function(route){
  var segments, namedSegment, reversePattern, pattern;
  segments = [];
  namedSegment = function(segment, pattern){
    segments.push(segment);
    return pattern;
  };
  reversePattern = function(params){
    var usedParams, useParam, pathname, query;
    params == null && (params = {});
    usedParams = [];
    useParam = function(name){
      var err;
      if (params[name] == null) {
        err = new Error("Missing route parameter: " + name);
        err.type = 'missing_param';
        throw err;
      }
      if (-1 === usedParams.indexOf(name)) {
        usedParams.push(name);
      }
      return params[name];
    };
    pathname = route.replace(ROUTE_SEGMENT, function(m){
      switch (m) {
      case '*':
        return useParam('splat');
      case '.':
      case '+':
      case '(':
      case ')':
        return m;
      default:
        return useParam(m.substr(1, m.length - 2));
      }
    });
    query = omit.apply(null, [params].concat(slice$.call(usedParams)));
    return {
      pathname: pathname,
      query: query,
      usedParams: usedParams
    };
  };
  pattern = route.replace(ROUTE_SEGMENT, function(m){
    switch (m) {
    case '*':
      return namedSegment('splat', '(.*?)');
    case '.':
    case '+':
    case '(':
    case ')':
      return escapeRegex(m);
    default:
      return namedSegment(m.substr(1, m.length - 2), '([^./?#]+)');
    }
  });
  return {
    segments: segments,
    reversePattern: reversePattern,
    pattern: new RegExp("^" + pattern + "$")
  };
};