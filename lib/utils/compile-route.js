// Generated by LiveScript 1.2.0
var RESERVED_CHARACTER, ROUTE_SEGMENT, escapeRegex, compileRoute;
RESERVED_CHARACTER = /([.?*+^$[\]\\(){}-])/g;
ROUTE_SEGMENT = /((:[a-z_$][a-z0-9_$]*)|[*.+()])/ig;
escapeRegex = function(symbol){
  return String(symbol).replace(RESERVED_CHARACTER, '\\$1');
};
/**
 * Compiles the given route string into a RegExp that can be used to match
 * it. The route may contain named keys in the form of a colon followed by a
 * valid JavaScript identifier (e.g. ":name", ":_name", or ":$name" are all
 * valid keys). If it does, these keys will be added to the given keys array.
 *
 * If the route contains the special "*" symbol, it will automatically create a
 * key named "splat" and will substituted with a "(.*?)" pattern in the
 * resulting RegExp.
 */
module.exports = compileRoute = function(route){
  var segments, namedSegment, pattern;
  segments = [];
  namedSegment = function(segment, pattern){
    segments.push(segment);
    return pattern;
  };
  pattern = route.replace(ROUTE_SEGMENT, function(m){
    switch (m) {
    case '*':
      return namedSegment('splat', '(.*?)');
    case '.':
    case '+':
    case '(':
    case ')':
      return escapeRegex(m);
    default:
      return namedSegment(m.substring(1), '([^./?#]+)');
    }
  });
  return {
    segments: segments,
    pattern: new RegExp("^" + pattern + "$")
  };
};